# Merged / optimized Dockerfile with Docker Engine preinstalled
# Build: docker build -t lab-env:latest .
# Run (recommended, when host allows privileged containers):
#   docker run --rm -it --privileged -v /home/labDirectory:/home/labDirectory -e HOME=/home/labDirectory lab-env:latest
# Or (use host Docker daemon via socket, preferred if available on host):
#   docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -v /home/labDirectory:/home/labDirectory -e HOME=/home/labDirectory lab-env:latest

FROM ubuntu:22.04 AS base

ARG DEBIAN_FRONTEND=noninteractive
ARG NODE_MAJOR=20

ENV INSTRUCTOR_SCRIPTS="/home/.evaluationScripts" \
    LAB_DIRECTORY="/home/labDirectory" \
    HOME=/home/labDirectory \
    TERM=xterm-256color \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PATH="/home/.evaluationScripts:/usr/local/bin:/usr/local/aws-cli/v2/current/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Install base packages, Node (NodeSource), AWS CLI v2, Serverless, Python deps, and Paramiko
RUN set -eux; \
    if command -v unminimize >/dev/null 2>&1; then yes | unminimize; fi; \
    apt-get update && apt-get install -y --no-install-recommends \
      software-properties-common \
      language-pack-en-base \
      debconf-utils \
      ca-certificates \
      curl gnupg lsb-release unzip wget build-essential \
      net-tools \
      nano \
      vim \
      less \
      iproute2 \
      python3 \
      python3-pip \
      python3-venv \
      python3-dev \
      jq \
      man-db \
      openssh-client \
      dbus \
      gnupg2 && \
    \
    # Install Node.js (NodeSource)
    curl -fsSL https://deb.nodesource.com/setup_${NODE_MAJOR}.x | bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    npm install -g npm@latest && \
    \
    # Install AWS CLI v2
    curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip && \
    unzip -q /tmp/awscliv2.zip -d /tmp && \
    /tmp/aws/install -i /usr/local/aws-cli -b /usr/local/bin && \
    rm -rf /tmp/aws /tmp/awscliv2.zip && \
    \
    # Python pip packages (including Paramiko) and other python bits
    python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel && \
    python3 -m pip install --no-cache-dir paramiko && \
   \
    # Global npm tool (serverless)
    npm install -g serverless@latest || true && \
    \
    # cleanup apt lists (keep image small)
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN python3 -m pip install --no-cache-dir boto3    

# ---------- DELTA: install Docker Engine (daemon + CLI) and startup script ----------
RUN set -eux; \
  apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates curl gnupg lsb-release gnupg2 dbus; \
  mkdir -p /etc/apt/keyrings; \
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg; \
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
    > /etc/apt/sources.list.d/docker.list; \
  apt-get update; \
  apt-get install -y --no-install-recommends \
    docker-ce docker-ce-cli containerd.io docker-compose-plugin; \
  groupadd -f docker || true; \
  mkdir -p /var/lib/docker /var/run/docker /var/log/docker; \
  apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Add a simple startup script to attempt to run dockerd inside the container.
# It prints clear messages if dockerd fails (useful when runtime doesn't allow starting daemon).
RUN cat > /usr/local/bin/start-dockerd.sh <<'EOF'
#!/bin/sh
set -eux

mkdir -p /var/log/docker

if command -v dockerd >/dev/null 2>&1; then
  echo "Attempting to start dockerd..." >&2
  # Start dockerd in background, log to file
  dockerd --host=unix:///var/run/docker.sock >> /var/log/docker/dockerd.log 2>&1 &
  DPID=$!
  # wait up to 15s for socket
  i=0
  while [ ! -S /var/run/docker.sock ] && [ $i -lt 15 ]; do
    sleep 1
    i=$((i+1))
  done
  if [ -S /var/run/docker.sock ]; then
    echo "dockerd started (PID=$DPID)" >&2
    # Keep container alive for interactive use / debugging
    exec tail -f /dev/null
  else
    echo "Warning: dockerd did not create /var/run/docker.sock. It may require --privileged or proper cgroup mounts at runtime." >&2
    echo "Inspect /var/log/docker/dockerd.log for details." >&2
    exec tail -f /var/log/docker/dockerd.log
  fi
else
  echo "dockerd binary not found" >&2
  exec tail -f /dev/null
fi
EOF

RUN chmod +x /usr/local/bin/start-dockerd.sh
# ---------------------------------------------------------------

# Create the lab directory and instructor scripts dir
RUN mkdir -p /home/labDirectory /home/.evaluationScripts && \
    echo "cd /home/labDirectory" > /root/.bashrc && \
    echo "alias ls='ls --color=always'" >> /root/.bashrc && \
    echo "rm -f \`find /home -type f -name \"._*\"\`" >> /root/.bashrc

# Optional: add same helpers to skeleton for any created user
RUN printf "cd /home/labDirectory\nalias ls='ls --color=always'\n" >> /etc/skel/.bashrc || true

WORKDIR /home/labDirectory

# Ensure root user (you may add non-root user later if desired)
USER root

# Attempt to start dockerd on container start (script will warn if runtime lacks privileges)
ENTRYPOINT ["/usr/local/bin/start-dockerd.sh"]

# Default keep-alive (ENTRYPOINT script handles keeping container up)
CMD [ "tail", "-f", "/dev/null" ]