service: activity4-image-pipeline

org: sammagnet7
app: serverless-app

provider:
  name: aws
  runtime: python3.10
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  profile: serverless-lab
  environment:
    THUMBNAILS_BUCKET: ${self:service}-${self:provider.stage}-${aws:accountId}-thumbnails
    JOBS_TABLE: ${self:service}-${self:provider.stage}-${aws:accountId}-ImageJobs
    IMAGE_EVENTS_TOPIC_ARN:
      Fn::GetAtt:
        - ImageEventsTopic
        - TopicArn
    ANALYTICS_BUCKET: ${self:service}-${self:provider.stage}-${aws:accountId}-analytics
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*:*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - arn:aws:s3:::${self:service}-${self:provider.stage}-${aws:accountId}-uploads
            - arn:aws:s3:::${self:service}-${self:provider.stage}-${aws:accountId}-uploads/*
            - arn:aws:s3:::${self:service}-${self:provider.stage}-${aws:accountId}-thumbnails
            - arn:aws:s3:::${self:service}-${self:provider.stage}-${aws:accountId}-thumbnails/*
            - arn:aws:s3:::${self:service}-${self:provider.stage}-${aws:accountId}-analytics
            - arn:aws:s3:::${self:service}-${self:provider.stage}-${aws:accountId}-analytics/*
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-${aws:accountId}-ImageJobs
        - Effect: Allow
          Action:
            - sns:Publish
            - sns:ListTopics
          Resource:
            - Fn::GetAtt:
                - ImageEventsTopic
                - TopicArn

functions:
  imageProcessor:
    handler: handlers/image_processor.handler
    timeout: 30
    memorySize: 512

  analyticsLogger:
    handler: handlers/analytics_logger.handler
    timeout: 10
    memorySize: 256
    events:
      - sns:
          arn:
            Fn::GetAtt:
              - ImageEventsTopic
              - TopicArn
          topicName: ${self:service}-${self:provider.stage}-${aws:accountId}-ImageEvents

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true

resources:
  Resources:

    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-${aws:accountId}-uploads
        VersioningConfiguration:
          Status: Enabled
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: !GetAtt ImageProcessorLambdaFunction.Arn

    S3InvokeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt ImageProcessorLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        # Use a literal ARN string (built with Fn::Sub) to avoid referencing the UploadsBucket resource
        SourceArn:
          Fn::Sub: "arn:aws:s3:::${self:service}-${self:provider.stage}-${aws:accountId}-uploads"

    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-${aws:accountId}-thumbnails
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false

    ThumbnailsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ThumbnailsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                - Fn::Sub: arn:aws:s3:::${self:service}-${self:provider.stage}-${aws:accountId}-thumbnails/*

    AnalyticsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-${aws:accountId}-analytics

    ImageJobs:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-${aws:accountId}-ImageJobs
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: jobId
            AttributeType: S
        KeySchema:
          - AttributeName: jobId
            KeyType: HASH

    ImageEventsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-${aws:accountId}-ImageEvents

  Outputs:
    UploadsBucketName:
      Description: "Uploads bucket name"
      Value: !Ref UploadsBucket

    ThumbnailsBucketName:
      Description: "Thumbnails bucket name"
      Value: !Ref ThumbnailsBucket

    AnalyticsBucketName:
      Description: "Analytics bucket name"
      Value: !Ref AnalyticsBucket

    ImageJobsTableName:
      Description: "DynamoDB table name"
      Value: !Ref ImageJobs

    ImageEventsTopicArn:
      Description: "SNS Topic ARN"
      Value:
        Fn::GetAtt:
          - ImageEventsTopic
          - TopicArn
